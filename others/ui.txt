package others

import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"github.com/tasnimzotder/artificial-life/constants"
	"image/color"
	"log"
)

package ui

import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"github.com/tasnimzotder/artificial-life/constants"
	"image/color"
	"log"
)

type Game struct {
	App     fyne.App
	Window  fyne.Window
	Canvas  *canvas.Raster
	Widgets *fyne.Container
}

func (g *Game) NewGame() {
	g.App = app.New()
	g.Window = g.App.NewWindow("Hello")
	g.Canvas = canvas.NewRasterWithPixels(
		func(x, y, w, h int) color.Color {
			return color.RGBA{B: 255, A: 255}
		},
	)

	//g.Window.Resize(fyne.NewSize(800, 600))
	g.Window.SetFixedSize(true)
	g.Window.CenterOnScreen()
	g.Window.SetCloseIntercept(func() {
		g.Window.Close()
	})

	g.Canvas.SetMinSize(fyne.NewSize(800, 600))

	//g.Window.Resize(fyne.NewSize(800, 600))
	//g.Window.SetFixedSize(true)
}

func (g *Game) Run() {
	// g.Window.Resize(fyne.NewSize(800, 600))
	//g.Window.SetContent(g.ControllerUI)

	//g.Window.SetContent(
	//	container.NewVBox(
	//		g.ControllerUI,
	//	),
	//)

	content := container.New(
		layout.NewVBoxLayout(),
		g.Canvas,
		g.Widgets,
	)

	//content.Resize(fyne.NewSize(200, 200))

	//g.Canvas.Resize(fyne.NewSize(200, 200))
	//g.Canvas.Move(fyne.NewPos(100, 100))

	g.Window.SetContent(content)
	g.Window.ShowAndRun()
}

func (g *Game) Update(grid *[][]uint8) {
	g.DrawGrid(grid)
	//g.Canvas.Refresh(g.Canvas.Content())
}

func (g *Game) DrawGrid(grid *[][]uint8) {
	g.Canvas.SetMinSize(fyne.NewSize(800, 600))
	log.Printf("Canvas Size: %v", g.Canvas.Size())

	raster := canvas.NewRasterWithPixels(
		func(x, y, w, h int) color.Color {

			log.Printf("w: %v, h: %v", w, h)

			canvasHeight := g.Canvas.Size().Height
			canvasWidth := g.Canvas.Size().Width

			heightRatio := float32(h) / canvasHeight
			widthRatio := float32(w) / canvasWidth

			cellHeight := canvasHeight / float32(len(*grid)) * heightRatio
			cellWidth := canvasWidth / float32(len((*grid)[0])) * widthRatio

			gridX := int(float32(x) / cellWidth)
			gridY := int(float32(y) / cellHeight)

			gridWidth := constants.GRID_WIDTH
			gridHeight := constants.GRID_HEIGHT

			if gridX >= gridWidth || gridY >= gridHeight {
				return color.RGBA{0, 0, 255, 255}
			}

			val := (*grid)[gridY][gridX]

			if gridX < gridWidth && gridY < gridHeight {
				return color.RGBA{0, val, 0, 255}
			}

			return color.RGBA{255, 0, 0, 255}
		})

	//g.Canvas.Refresh()
	//g.Canvas.SetMinSize(fyne.NewSize(800, 600))

	g.Canvas = raster

	//g.Window.SetContent(raster)

	//g.Canvas.SetContent(raster)
	//g.Window.Canvas().SetContent(raster)

}

//func (g *Game) SetContent(content fyne.CanvasObject) {
//	g.Window.SetContent(content)
//}

